openapi: 3.1.0
info:
  title: API Reference
  version: '1.0'
  summary: An API to facilitate the uploading of media Content into StreamAMGs CloudMatrix & MediaPlatform Products
  description: |-
    The CloudMatrix Upload API provides clients with the functionality to upload Media Content via a HTTP API with no dependencies on a technology or framework.

    The upload functionality allows clients to upload Rich Metadata alongside their media so that it is automatically available within CloudMatrix once the media entry is processed via MediaPlatform. 
servers: []
paths:
  /upload:
    parameters: []
    put:
      summary: Request a upload URL
      operationId: put-upload
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    entryId: 0_xshqrl2n
                    signedUrl: 'https://streamamg.s3.eu-west-2.amazonaws.com/example-1.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host'
                properties:
                  entryId:
                    type: string
                    minLength: 1
                  uploadUrl:
                    type: string
                    minLength: 1
                required:
                  - entryId
                  - uploadUrl
              examples:
                Example:
                  value:
                    entryId: 0_xshqrl2n
                    uploadUrl: 'https://streamamg.s3.eu-west-2.amazonaws.com/example-1.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host'
      description: |-
        In order to upload a media entry, first a initial API call to retrive a signed URL must be generated. This signed URL will allow you to directly upload the media asset to the storage location via HTTP.

        The initial API call should consist of metadata you would like to store against your asset within the CloudMatrix Platform and any associated entitlements for the entry you are uploading.

        Note: This method of upload only supports upto 5GB per asset, for larger assets please refer to the multipart upload.
      tags:
        - Upload
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  id: 27b24738-7f6b-11ec-a8a3-0242ac120002
                  title: Example 1
                  description: A brief description of the example 1 video
                  metadata:
                    originalReleaseDate: '2022-01-01'
                  entitlements:
                    - monthly99
                    - premium
              properties:
                filename:
                  type: string
                id:
                  type: string
                  minLength: 1
                title:
                  type: string
                  minLength: 1
                description:
                  type: string
                  minLength: 1
                metadata:
                  type: object
                  required:
                    - originalReleaseDate
                  properties:
                    originalReleaseDate:
                      type: string
                      minLength: 1
                entitlements:
                  type: array
                  items:
                    type: object
                '':
                  type: string
              required:
                - id
                - title
                - description
                - metadata
                - entitlements
            examples:
              Example:
                value:
                  filename: example-1.mp4
                  id: 27b24738-7f6b-11ec-a8a3-0242ac120002
                  title: Example 1
                  description: A brief description of the example 1 video
                  metadata:
                    originalReleaseDate: '2022-01-01'
                  entitlements:
                    - monthly99
                    - premium
        description: The body should contain the additional CloudMatrix Metadata you would like to store along side the entry.
  /multipart/start:
    put:
      summary: Start multipart upload
      operationId: put-multipart-start
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  entryId:
                    type: string
                    minLength: 1
                  uploadId:
                    type: string
                    minLength: 1
                required:
                  - entryId
                  - uploadId
                x-examples:
                  example-1:
                    entryId: 0_tsdqrl2p
                    uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
              examples:
                Example:
                  value:
                    entryId: 0_tsdqwl2p
                    uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
      description: |-
        For larger uploads (Larger than 5GB) you should utilise the multipart API, this allows the upload to handle partial uploads.

        Like the upload process this has multiple steps, the first step you must initialise the multipart upload process by calling the start endpoint.
      tags:
        - Multipart
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  id: 68ca71de-7f6e-11ec-a8a3-0242ac120002
                  title: Example 2
                  description: A brief description of the example 2 video
                  metadata:
                    originalReleaseDate: '2022-01-07'
                  entitlements:
                    - monthly99
                    - premium
                  multipart:
                    numberOfParts: 10
              properties:
                filename:
                  type: string
                id:
                  type: string
                  minLength: 1
                title:
                  type: string
                  minLength: 1
                description:
                  type: string
                  minLength: 1
                metadata:
                  type: object
                  required:
                    - originalReleaseDate
                  properties:
                    originalReleaseDate:
                      type: string
                      minLength: 1
                entitlements:
                  type: array
                  items:
                    type: object
              required:
                - id
                - title
                - description
                - metadata
                - entitlements
            examples:
              Example:
                value:
                  filename: example-1.mp4
                  id: 68ca71de-7f6e-11ec-a8a3-0242ac120002
                  title: Example 2
                  description: A brief description of the example 2 video
                  metadata:
                    originalReleaseDate: '2022-01-07'
                  entitlements:
                    - monthly99
                    - premium
        description: The request body should contain information you would like to store against your CloudMatrix Entry
  /multipart/upload:
    put:
      summary: Request a upload URL
      operationId: put-multipart-start
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    partNumber: 1
                    uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
                    etag: 33a64df551425fcc55e4d42a148795d9f25f89d4
                properties:
                  partNumber:
                    type: number
                  uploadId:
                    type: string
                    minLength: 1
                  uploadUrl:
                    type: string
                    minLength: 1
                required:
                  - partNumber
                  - uploadId
                  - uploadUrl
              examples:
                Example:
                  value:
                    partNumber: 1
                    uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
                    uploadUrl: 'https://streamamg.s3.eu-west-2.amazonaws.com/example-1.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host'
          headers: {}
      description: |-
        The multipart upload endpoint allows you to generate a signed URL for the binary chunk you want to upload.

        It is important that you store a the etag response for each upload as this is required for the final step of completing the multiple upload.
      tags:
        - Multipart
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                partNumber:
                  type: number
                uploadId:
                  type: string
                  minLength: 1
              required:
                - partNumber
                - uploadId
              x-examples:
                example-1:
                  partNumber: 1
                  uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
            examples:
              Example:
                value:
                  partNumber: 1
                  uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
        description: The request body must contain the part number and the upload id of the partial upload chunk.
    parameters: []
  /multipart/complete:
    put:
      summary: Complete a multipart upload
      operationId: put-multipart-start
      responses:
        '200':
          description: OK
      description: 'The final part of the multipart upload is the completion step. This request should be called when all chunks of the data have been sent. '
      tags:
        - Multipart
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                uploadId:
                  type: string
                  minLength: 1
                parts:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    required:
                      - partNumber
                      - etag
                    properties:
                      partNumber:
                        type: number
                      etag:
                        type: string
                        minLength: 1
              required:
                - uploadId
                - parts
              x-examples:
                example-1:
                  uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
                  parts:
                    - partNumber: 1
                      etag: 33a64df551425fcc55e4d42a148795d9f25f89d4
                    - partNumber: 2
                      etag: 44a64df551425fcc55e4d42a148795d9f25f89d5
                    - partNumber: 2
                      etag: 55a64df551425fcc55e4d42a148795d9f25f89d6
            examples:
              Example:
                value:
                  uploadId: 9c16caf8-7f71-11ec-a8a3-0242ac120002
                  parts:
                    - partNumber: 1
                      etag: 33a64df551425fcc55e4d42a148795d9f25f89d4
                    - partNumber: 2
                      etag: 44a64df551425fcc55e4d42a148795d9f25f89d5
                    - partNumber: 2
                      etag: 55a64df551425fcc55e4d42a148795d9f25f89d6
        description: The request body should contain a reference to each part along with the Etag of each upload.
    parameters: []
components:
  schemas: {}
